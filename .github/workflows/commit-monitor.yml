name: Commit Monitor

on:
  push:
    branches: [main, master]
    paths:
      - "Actions/**"
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Commit SHA to analyze"
        required: true

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev

      - name: Run commit monitor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMPANYHUB_API_KEY: ${{ secrets.COMPANYHUB_API_KEY }}
          COMPANYHUB_BASE_URL: ${{ secrets.COMPANYHUB_BASE_URL }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          COMMIT_SHA: ${{ github.event.inputs.commit_sha || github.sha }}
        run: |
          node commit-monitor.js $COMMIT_SHA

      - name: Upload results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: commit-analysis-results
          path: commit-analysis-*.json

      - name: Comment on commit (if differences found)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('.').filter(f => f.startsWith('commit-analysis-'));

            if (files.length > 0) {
              const result = JSON.parse(fs.readFileSync(files[0], 'utf8'));
              const updates = result.differences.filter(d => d.status === 'updated' || d.status === 'missing');
              
              let comment = '## 🔍 Commit Analysis Results\n\n';
              comment += `**Summary:** ${updates.length} actions need attention\n\n`;
              
              updates.forEach(update => {
                comment += `### ${update.actionName} (ID: ${update.actionId})\n`;
                comment += `**Status:** ${update.status}\n`;
                comment += `**Message:** ${update.message}\n\n`;
              });
              
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: comment
              });
            }
